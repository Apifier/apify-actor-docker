name: Release node image

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag for the images (e.g.: beta)'
        required: true
      apify_version:
        description: 'Apify SDK version (e.g.: ^1.0.0)'
        required: true

  repository_dispatch:
    types: [ build-images ]

env:
  RELEASE_TAG: ${{ github.event.inputs.release_tag || github.event.client_payload.release_tag }}
  APIFY_VERSION: ${{ github.event.inputs.apify_version || github.event.client_payload.apify_version }}
  NODE_LATEST: 16

jobs:
  # Build master images that are not dependent on existing builds.
  build-main:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image-name: [node]
        node-version: [14, 15, 16]
    steps:
      - name: Prepare tags
        id: prepare_tags
        uses: actions/github-script@v4
        env:
          CURRENT_NODE: ${{ matrix.node-version }}
          LATEST_NODE: ${{ env.NODE_LATEST }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
        with:
          script: |
              const { CURRENT_NODE, LATEST_NODE, RELEASE_TAG } = process.env

              console.log(`Hello ${CURRENT_NODE} ${LATEST_NODE}, ${RELEASE_TAG}`)
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Set Dependency Versions
        run: |
          cd ${{ matrix.image-name }}
          node ../.github/scripts/set-dependency-versions.js
      -
        # It seems that it takes at least two minutes before a newly published version
        # becomes available in the NPM registry. We wait before starting the image builds.
        name: Wait For Package Registry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 2 # timeout for a single attempt
          max_attempts: 3
          retry_wait_seconds: 60 # wait between retries
          command: cd ${{ matrix.image-name }} && npm i --dry-run
      - 
        name: Build image with latest tag
        uses: docker/build-push-action@v2
        if: ${{ env.RELEASE_TAG == 'latest' && matrix.node-version == env.NODE_LATEST }}
        with:
          context: ./${{ matrix.image-name }}
          file: ./${{ matrix.image-name }}/Dockerfile
          build-args: NODE_VERSION=${{ matrix.node-version }}
          load: true
          tags: apify/actor-${{ matrix.image-name }}:${{ env.RELEASE_TAG }}
      - 
        name: Build image with node version tag
        uses: docker/build-push-action@v2
        if: ${{ env.RELEASE_TAG == 'latest' }}
        with:
          context: ./${{ matrix.image-name }}
          file: ./${{ matrix.image-name }}/Dockerfile
          build-args: NODE_VERSION=${{ matrix.node-version }}
          load: true
          tags: apify/actor-${{ matrix.image-name }}:${{ matrix.node-version }}
      -
        name: Build image with release tag
        uses: docker/build-push-action@v2
        if: ${{ env.RELEASE_TAG != 'latest' && matrix.node-version == env.NODE_LATEST }}
        with:
          context: ./${{ matrix.image-name }}
          file: ./${{ matrix.image-name }}/Dockerfile
          build-args: NODE_VERSION=${{ matrix.node-version }}
          load: true
          tags: apify/actor-${{ matrix.image-name }}:${{env.RELEASE_TAG}}-${{ env.RELEASE_TAG }}
 
      -
        name: Test image with release tag
        if: ${{ matrix.node-version == env.NODE_LATEST }}
        run: docker run apify/actor-${{ matrix.image-name }}:${{ env.RELEASE_TAG }}
      -
        name: Test image with node version tag
        if: ${{ env.RELEASE_TAG == 'latest'}}
        run: docker run apify/actor-${{ matrix.image-name }}:${{ matrix.node-version }}
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Push image with release tag
        if: ${{ matrix.node-version == env.NODE_LATEST }}
        run: docker push apify/actor-${{ matrix.image-name }}:${{ env.RELEASE_TAG }}
      -
        name: Push image with node version tag
        if: ${{ env.RELEASE_TAG == 'latest' }}
        run: docker push apify/actor-${{ matrix.image-name }}:${{ matrix.node-version }}